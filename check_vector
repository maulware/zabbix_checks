#!/bin/ash
#
# Test vector version and return errors/offsets
# Expects to find a link in the HTDOCS folder
# can be pointed to any feed -.-
#
# (c) maulware, mauli 2017
# served as is, change as you want
#
# parameters:
#   $1 -> <atom-url>
#   $2 -> <HTDOCS-folder>
#   $3 -> [(CHECK)|DOWNLOAD|INSTALL]
# 

##################################################
# Define error, update-needed and OK return codes

ERR_NO_ARGUMENTS="-0.9900"
ERR_TOO_FEW_ARGUMENTS="-0.9901"

ERR_ATOM_EMPTY="-0.9910"
ERR_HTDOCS_EMPTY="-0.9911"
ERR_HTDOCS_NO_DIR="-0.9912"
ERR_TODO_TASK_INVALID="-0.9913"

ERR_MISSING_WHICH="-0.9920"
ERR_MISSING_GREP="-0.9921"
ERR_MISSING_WGET_AND_CURL="-0.9922"
ERR_MISSING_HEAD="-0.9923"

ERR_GET_REMOTE_VERSION="-0.9930"
ERR_GET_LOCAL_VERSION="-0.9931"

ERR_UPDATE_NEEDED="-0.9940"

ERR_UPDATE_DOWNLOAD="-0.9941"

ERR_INSTALL_WILL_NOT_HAPPEN="-0.9950"
ERR_UPDATE_EXTRACT="-0.9951"
ERR_EXTRACTED_PERMISSIONS="-0.9952"
ERR_UPDATE_INSTALL="-0.9953"

ERR_FAILED_RM_LINK="-0.9961"
ERR_FAILED_LINK_CREATE="-0.9962"
ERR_NGINX_CONFIGTEST="-0.9963"
ERR_NGINX_RELOAD="-0.9964"

ERR_UNKNOWN="-0.9999"

OK_UP_TO_DATE="0.0000"
OK_UPDATE_DOWNLOADED="0.0001"
OK_UPDATE_INSTALLED="0.0002"

##################################################
# Check argument number we require

if [ $# -eq 0 ];then
  echo $ERR_NO_ARGUMENTS
  exit 1
fi

if [ $# -lt 2 ]; then
  echo $ERR_TOO_FEW_ARGUMENTS
  exit 1
fi

##################################################
# Check argument content and local files

ATOM="$1"
HTDOCS="$2"
TASK_TODO="$3" # either: CHECK,DOWNLOAD,INSTALL

if [ -z "$ATOM" ]; then
  echo $ERR_ATOM_EMPTY
  exit 1
fi

if [ -z "$HTDOCS" ]; then
  echo $ERR_HTDOCS_EMPTY
  exit 1
fi

if [ ! -d "$HTDOCS" ]; then
  echo $ERR_HTDOCS_NO_DIR
  exit 1
fi

if [ ! -z "$TASK_TODO" ]; then
  TASK_TODO="CHECK"
fi

if [ "$TASK_TODO" != "CHECK" -a "$TASK_TODO" != "DOWNLOAD" -a "$TASK_TODO" != "INSTALL" ]; then
  echo $ERR_TODO_TASK_INVALID
  exit 1
fi

##################################################
# Check the local tools we want to use

WGET=`which wget`
CURL=`which curl`
GREP=`which grep`
HEAD=`which head`

if [ $? -eq 127 ]; then
  echo $ERR_MISSING_WHICH
  exit 1
fi

if [ -z "$WGET" -a -z "$CURL" ]; then
  echo $ERR_MISSING_WGET_AND_CURL
  exit 1
fi

if [ -z "$GREP" ];then
  echo $ERR_MISSING_GREP
  exit 1
fi

if [ -z "$HEAD" ];then
  echo $ERR_MISSING_HEAD
  exit 1
fi

##################################################
# Good to go grep the local and remote version

if [ ! -z "$WGET" ];then
  VERSION_GH=$($WGET -qO- $ATOM | $GREP '<title>' | $GREP -o "v[^<]*" | $HEAD -n 1)
else
  VERSION_GH=$($CURL -s $ATOM | $GREP '<title>' | $GREP -o "v[^<]*" | $HEAD -n 1)
fi

if [ $? -ne 0 -o -z "$VERSION_GH" ]; then
  echo $ERR_GET_REMOTE_VERSION
  exit 1
fi

VERSION_LO=$(readlink "${HTDOCS}/riot" | cut -d- -f2-)

if [ $? -ne 0 -o -z "$VERSION_LO" ]; then
  echo $ERR_GET_LOCAL_VERSION
  exit 1
fi

##################################################
# Compare local and remote version

if [ "$VERSION_LO" == "$VERSION_GH" ]; then
  echo $OK_UP_TO_DATE
  exit 0
fi

if [ "$TASK_TODO" == "CHECK" ]; then
  echo $ERR_UPDATE_NEEDED
  exit 1
fi

##################################################
# Download new version

cd "$HTDOCS"

if [ ! -z "$WGET" ]; then
  $WGET -q https://github.com/vector-im/riot-web/releases/download/${VERSION_GH}/riot-${VERSION_GH}.tar.gz
else
  $CURL -s https://github.com/vector-im/riot-web/releases/download/${VERSION_GH}/riot-${VERSION_GH}.tar.gz > riot-${VERSION_GH}.tar.gz
fi

if [ $? -ne 0 -o ! -f riot-${VERSION_GH}.tar.gz ]; then
  echo $ERR_UPDATE_DOWNLOAD
  exit 1
fi

if [ "$TASK_TODO" == "DOWNLOAD" ]; then
  echo $OK_DOWNLOAD_UPDATE
  exit 0
fi

##################################################
# Install new version

if [ "$TASK_TODO" != "INSTALL" ]; then
  echo $ERR_INSTALL_WILL_NOT_HAPPEN
  exit 1
fi

tar zxpf riot-${VERSION_GH}.tar.gz

if [ $? -ne 0 ]; then
  echo $ERR_UPDATE_EXTRACT
  exit 1
fi

cp riot-${VERSION_LO}/config.json riot-${VERSION_GH}
cp riot-${VERSION_LO}/home.html riot-${VERSION_GH}
chmod og+r riot-${VERSION_LO}/config.json riot-${VERSION_LO}/home.html

if [ $(find . -perm /g=r,o=r | wc -l) -ne 0 ]; then
  echo $ERR_EXTRACTED_PERMISSIONS
  exit 1
fi

rm riot

if [ $? -ne 0 ]; then
  echo $ERR_FAILED_RM_LINK
  exit 1
fi

ln -s riot-${VERSION_GH} riot

if [ $? -ne 0 ]; then
  echo $ERR_FAILED_LINK_CREATE
  exit 1
fi

nginx -t -c /etc/nginx/nginx.conf 

if [ $? -ne 0 ]; then
  echo $ERR_NGINX_CONFIGTEST
  exit 1
fi

service nginx reload

if [ $? -ne 0 ]; then
  echo $ERR_NGINX_RELOAD
  exit 1
fi

##################################################
# Undefined / Unknwon end

echo $ERR_UNKNOWN
exit 1

